snippet ns "(ns name & references)" b
(ns ${0:main.core})
endsnippet

snippet def "(def symbol doc-string? init)" b
(def ${1:symbol} ${0:init})
endsnippet

snippet defn "(defn name doc-string? attr-map? [params*] prepost-map? body)" b
(defn ${1:fname} [${2:params}]
	${0:exprs}))
endsnippet

snippet fn "(fn name? [params*] exprs*)" b
(fn [${1:params}]
	${0:exprs})
endsnippet

snippet let "(let bindings & body)" b
(let [${1:bindings}]
	${0:exprs})
endsnippet

snippet letfn "(letfn fnspecs & body)" b
(letfn [(${1:fname} [${2:params}]
	${3:exprs})${0}])
endsnippet

snippet if "(if test then else?)" b
(if ${1:test-expr}
	${2:then-expr}
	${0:else-expr})
endsnippet

snippet if-not "(if-not test then else?)" b
(if-not ${1:test-expr}
	${2:then-expr}
	${0:else-expr})
endsnippet

snippet if-let "(if-let bindings then else)" b
(if-let [${1:symbol} ${2:test}]
	${3:then-expr}
	${0:else-expr})
endsnippet

snippet when "(when test & body)" b
(when ${1:test-expr}
	${0:then-expr})
endsnippet

snippet when-not "(when-not test & body)" b
(when-not ${1:test-expr}
	${0:then-expr})
endsnippet

snippet when-let "(when-let bindings & body)" b
(when-let [${1:symbol} ${2:test}]
	${0:then-expr})
endsnippet

snippet when-some "(when-some bindings & body)" b
(when-some [${1:symbol} ${2:test}]
	${0:then-expr})
endsnippet

snippet when-first "(when-first bindings & body)" b
(when-first [${1:symbol} ${2:seq}]
	${0:then-expr})
endsnippet

snippet cond "(cond & clauses)" b
(cond
	${1:case-expr} ${2:then-expr}
	:else ${0:else-expr})
endsnippet

snippet condp "(condp pred expr & clauses)" b
(condp ${1:pred} ${2:expr}
	${3:case} ${0:then-expr})
endsnippet

snippet case "(case e & clauses)" b
(case ${1:symbol}
	${2:case} ${0:then-expr})
endsnippet

snippet p "(print str)" b
(print ${0:str})
endsnippet

snippet pl "(println str)" b
(println ${0:str})
endsnippet

snippet = "(= x y & more)" w
(= ${1:x} ${0:y})
endsnippet

snippet not "(not= x y & more)" w
(not= ${1:x} ${0:y})
endsnippet

snippet and "(and x y & more)" w
(and ${1:x} ${0:y})
endsnippet

snippet or "(or x y & more)" w
(or ${1:x} ${0:y})
endsnippet

snippet obj= "(identical? x y)" w
(identical? ${1:x} ${0:y})
endsnippet

snippet compare "(compare x y)" w
(compare ${1:x} ${0:y})
endsnippet


